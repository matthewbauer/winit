use smithay_client_toolkit::seat::keyboard::{self, Event::Key};
use crate::event::{VirtualKeyCode, ModifiersState};

pub(crate) fn modifiers(mods: keyboard::ModifiersState) -> ModifiersState {
    let mut m = ModifiersState::empty();
    m.set(ModifiersState::SHIFT, mods.shift);
    m.set(ModifiersState::CTRL, mods.ctrl);
    m.set(ModifiersState::ALT, mods.alt);
    m.set(ModifiersState::LOGO, mods.logo);
    m
}

fn cursor(cursor: CursorIcon) -> &'static str {
    match cursor {
        CursorIcon::Alias => "link",
        CursorIcon::Arrow => "arrow",
        CursorIcon::Cell => "plus",
        CursorIcon::Copy => "copy",
        CursorIcon::Crosshair => "crosshair",
        CursorIcon::Default => "left_ptr",
        CursorIcon::Hand => "hand",
        CursorIcon::Help => "question_arrow",
        CursorIcon::Move => "move",
        CursorIcon::Grab => "grab",
        CursorIcon::Grabbing => "grabbing",
        CursorIcon::Progress => "progress",
        CursorIcon::AllScroll => "all-scroll",
        CursorIcon::ContextMenu => "context-menu",

        CursorIcon::NoDrop => "no-drop",
        CursorIcon::NotAllowed => "crossed_circle",

        // Resize cursors
        CursorIcon::EResize => "right_side",
        CursorIcon::NResize => "top_side",
        CursorIcon::NeResize => "top_right_corner",
        CursorIcon::NwResize => "top_left_corner",
        CursorIcon::SResize => "bottom_side",
        CursorIcon::SeResize => "bottom_right_corner",
        CursorIcon::SwResize => "bottom_left_corner",
        CursorIcon::WResize => "left_side",
        CursorIcon::EwResize => "h_double_arrow",
        CursorIcon::NsResize => "v_double_arrow",
        CursorIcon::NwseResize => "bd_double_arrow",
        CursorIcon::NeswResize => "fd_double_arrow",
        CursorIcon::ColResize => "h_double_arrow",
        CursorIcon::RowResize => "v_double_arrow",

        CursorIcon::Text => "text",
        CursorIcon::VerticalText => "vertical-text",

        CursorIcon::Wait => "watch",

        CursorIcon::ZoomIn => "zoom-in",
        CursorIcon::ZoomOut => "zoom-out",
    }
}

pub fn key(key : Key) -> Option<VirtualKeyCode> {
    use {keyboard::keysyms::*, VirtualKeyCode::*};
    #[allow(non_upper_case_globals)]
    match key.rawkey {
        1 => Some(Escape),
        2 => Some(Key1),
        3 => Some(Key2),
        4 => Some(Key3),
        5 => Some(Key4),
        6 => Some(Key5),
        7 => Some(Key6),
        8 => Some(Key7),
        9 => Some(Key8),
        10 => Some(Key9),
        11 => Some(Key0),
        _ => match key.keysym {
            // letters
            XKB_KEY_A | XKB_KEY_a => Some(A),
            XKB_KEY_B | XKB_KEY_b => Some(B),
            XKB_KEY_C | XKB_KEY_c => Some(C),
            XKB_KEY_D | XKB_KEY_d => Some(D),
            XKB_KEY_E | XKB_KEY_e => Some(E),
            XKB_KEY_F | XKB_KEY_f => Some(F),
            XKB_KEY_G | XKB_KEY_g => Some(G),
            XKB_KEY_H | XKB_KEY_h => Some(H),
            XKB_KEY_I | XKB_KEY_i => Some(I),
            XKB_KEY_J | XKB_KEY_j => Some(J),
            XKB_KEY_K | XKB_KEY_k => Some(K),
            XKB_KEY_L | XKB_KEY_l => Some(L),
            XKB_KEY_M | XKB_KEY_m => Some(M),
            XKB_KEY_N | XKB_KEY_n => Some(N),
            XKB_KEY_O | XKB_KEY_o => Some(O),
            XKB_KEY_P | XKB_KEY_p => Some(P),
            XKB_KEY_Q | XKB_KEY_q => Some(Q),
            XKB_KEY_R | XKB_KEY_r => Some(R),
            XKB_KEY_S | XKB_KEY_s => Some(S),
            XKB_KEY_T | XKB_KEY_t => Some(T),
            XKB_KEY_U | XKB_KEY_u => Some(U),
            XKB_KEY_V | XKB_KEY_v => Some(V),
            XKB_KEY_W | XKB_KEY_w => Some(W),
            XKB_KEY_X | XKB_KEY_x => Some(X),
            XKB_KEY_Y | XKB_KEY_y => Some(Y),
            XKB_KEY_Z | XKB_KEY_z => Some(Z),
            // F--
            XKB_KEY_F1 => Some(F1),
            XKB_KEY_F2 => Some(F2),
            XKB_KEY_F3 => Some(F3),
            XKB_KEY_F4 => Some(F4),
            XKB_KEY_F5 => Some(F5),
            XKB_KEY_F6 => Some(F6),
            XKB_KEY_F7 => Some(F7),
            XKB_KEY_F8 => Some(F8),
            XKB_KEY_F9 => Some(F9),
            XKB_KEY_F10 => Some(F10),
            XKB_KEY_F11 => Some(F11),
            XKB_KEY_F12 => Some(F12),
            XKB_KEY_F13 => Some(F13),
            XKB_KEY_F14 => Some(F14),
            XKB_KEY_F15 => Some(F15),
            XKB_KEY_F16 => Some(F16),
            XKB_KEY_F17 => Some(F17),
            XKB_KEY_F18 => Some(F18),
            XKB_KEY_F19 => Some(F19),
            XKB_KEY_F20 => Some(F20),
            XKB_KEY_F21 => Some(F21),
            XKB_KEY_F22 => Some(F22),
            XKB_KEY_F23 => Some(F23),
            XKB_KEY_F24 => Some(F24),
            // flow control
            XKB_KEY_Print => Some(Snapshot),
            XKB_KEY_Scroll_Lock => Some(Scroll),
            XKB_KEY_Pause => Some(Pause),
            XKB_KEY_Insert => Some(Insert),
            XKB_KEY_Home => Some(Home),
            XKB_KEY_Delete => Some(Delete),
            XKB_KEY_End => Some(End),
            XKB_KEY_Page_Down => Some(PageDown),
            XKB_KEY_Page_Up => Some(PageUp),
            // arrows
            XKB_KEY_Left => Some(Left),
            XKB_KEY_Up => Some(Up),
            XKB_KEY_Right => Some(Right),
            XKB_KEY_Down => Some(Down),
            //
            XKB_KEY_BackSpace => Some(Back),
            XKB_KEY_Return => Some(Return),
            XKB_KEY_space => Some(Space),
            // keypad
            XKB_KEY_Num_Lock => Some(Numlock),
            XKB_KEY_KP_0 => Some(Numpad0),
            XKB_KEY_KP_1 => Some(Numpad1),
            XKB_KEY_KP_2 => Some(Numpad2),
            XKB_KEY_KP_3 => Some(Numpad3),
            XKB_KEY_KP_4 => Some(Numpad4),
            XKB_KEY_KP_5 => Some(Numpad5),
            XKB_KEY_KP_6 => Some(Numpad6),
            XKB_KEY_KP_7 => Some(Numpad7),
            XKB_KEY_KP_8 => Some(Numpad8),
            XKB_KEY_KP_9 => Some(Numpad9),
            // misc
            // => Some(AbntC1),
            // => Some(AbntC2),
            XKB_KEY_plus => Some(Add),
            XKB_KEY_apostrophe => Some(Apostrophe),
            // => Some(Apps),
            // => Some(At),
            // => Some(Ax),
            XKB_KEY_backslash => Some(Backslash),
            // => Some(Calculator),
            // => Some(Capital),
            XKB_KEY_colon => Some(Colon),
            XKB_KEY_comma => Some(Comma),
            // => Some(Convert),
            // => Some(Decimal),
            // => Some(Divide),
            XKB_KEY_equal => Some(Equals),
            // => Some(Grave),
            // => Some(Kana),
            // => Some(Kanji),
            XKB_KEY_Alt_L => Some(LAlt),
            // => Some(LBracket),
            XKB_KEY_Control_L => Some(LControl),
            XKB_KEY_Shift_L => Some(LShift),
            // => Some(LWin),
            // => Some(Mail),
            // => Some(MediaSelect),
            // => Some(MediaStop),
            XKB_KEY_minus => Some(Minus),
            XKB_KEY_asterisk => Some(Multiply),
            // => Some(Mute),
            // => Some(MyComputer),
            // => Some(NextTrack),
            // => Some(NoConvert),
            XKB_KEY_KP_Separator => Some(NumpadComma),
            XKB_KEY_KP_Enter => Some(NumpadEnter),
            XKB_KEY_KP_Equal => Some(NumpadEquals),
            XKB_KEY_KP_Add => Some(Add),
            XKB_KEY_KP_Subtract => Some(Subtract),
            XKB_KEY_KP_Divide => Some(Divide),
            XKB_KEY_KP_Page_Up => Some(PageUp),
            XKB_KEY_KP_Page_Down => Some(PageDown),
            XKB_KEY_KP_Home => Some(Home),
            XKB_KEY_KP_End => Some(End),
            // => Some(OEM102),
            // => Some(Period),
            // => Some(Playpause),
            // => Some(Power),
            // => Some(Prevtrack),
            XKB_KEY_Alt_R => Some(RAlt),
            // => Some(RBracket),
            XKB_KEY_Control_R => Some(RControl),
            XKB_KEY_Shift_R => Some(RShift),
            // => Some(RWin),
            XKB_KEY_semicolon => Some(Semicolon),
            XKB_KEY_slash => Some(Slash),
            // => Some(Sleep),
            // => Some(Stop),
            // => Some(Subtract),
            // => Some(Sysrq),
            XKB_KEY_Tab => Some(Tab),
            XKB_KEY_ISO_Left_Tab => Some(Tab),
            // => Some(Underline),
            // => Some(Unlabeled),
            XKB_KEY_XF86AudioLowerVolume => Some(VolumeDown),
            XKB_KEY_XF86AudioRaiseVolume => Some(VolumeUp),
            // => Some(Wake),
            // => Some(Webback),
            // => Some(WebFavorites),
            // => Some(WebForward),
            // => Some(WebHome),
            // => Some(WebRefresh),
            // => Some(WebSearch),
            // => Some(WebStop),
            // => Some(Yen),
            XKB_KEY_XF86Copy => Some(Copy),
            XKB_KEY_XF86Paste => Some(Paste),
            XKB_KEY_XF86Cut => Some(Cut),
            // fallback
            _ => None,
        }
    }
}
